name: Upload Lambda Edge

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment environment"
        required: true
        type: choice
        options:
          - staging
          - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set env for staging
        if: ${{ inputs.environment == 'staging' }}
        run: |
          echo "AWS_LAMBDA_FUNCTION_ARN=${{ secrets.STAGING_AWS_LAMBDA_EDGE_RESPONSE_HEADER_ARN }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}" >> $GITHUB_ENV
          echo "PEPPER_EVENT=${{ secrets.STAGING_PEPPER_EVENT }}" >> $GITHUB_ENV
          echo "SITE_DOMAIN=${{ secrets.STAGING_SITE_DOMAIN }}" >> $GITHUB_ENV

      - name: Set env for production
        if: ${{ inputs.environment == 'production' }}
        run: |
          echo "AWS_LAMBDA_FUNCTION_ARN=${{ secrets.PRODUCTION_AWS_LAMBDA_EDGE_RESPONSE_HEADER_ARN }}" >> $GITHUB_ENV
          echo "DATABASE_URL=${{ secrets.PRODUCTION_DATABASE_URL }}" >> $GITHUB_ENV
          echo "PEPPER_EVENT=${{ secrets.PRODUCTION_PEPPER_EVENT }}" >> $GITHUB_ENV
          echo "SITE_DOMAIN=${{ secrets.PRODUCTION_SITE_DOMAIN }}" >> $GITHUB_ENV

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "18.16"

      - name: Before Install
        run: |
          rm -rf ./apps/workshop
          rm -rf ./apps/server
          rm -rf ./apps/web

      - name: Install Dependencies
        run: npm ci --ignore-scripts -workspace=edge

      - name: Build
        env:
          NODE_ENV: production
        run: npm run build-lambda -workspace=edge

      - name: Pur ENV
        run: echo -e "DATABASE_URL=\"${{ env.DATABASE_URL }}\"\nPEPPER_EVENT=\"${{ env.PEPPER_EVENT }}\"\nSITE_DOMAIN=\"${{ env.SITE_DOMAIN }}\"" > ./apps/edge/dist/.env

      - name: Zip function code
        run: zip -rj lambda.zip ./apps/edge/dist

      - name: Update function code
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ENV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ENV_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: aws lambda update-function-code --function-name ${{ env.AWS_LAMBDA_FUNCTION_ARN }} --zip-file fileb://lambda.zip

      - name: Wait for update-function-code completion
        timeout-minutes: 10
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ENV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ENV_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: |
          while :; \
          do \
          LAMBDA_UPDATE_STATUS=$(aws lambda get-function --function-name ${{ env.AWS_LAMBDA_FUNCTION_ARN }} | jq -r .Configuration.LastUpdateStatus); \
          LAMBDA_STATE=$(aws lambda get-function --function-name ${{ env.AWS_LAMBDA_FUNCTION_ARN }} | jq -r .Configuration.State); \
            if [ "$LAMBDA_UPDATE_STATUS" = "Successful" ] && [ "$LAMBDA_STATE" = "Active" ]; \
            then \
              echo "update completion"; \
              break; \
            elif [ "$LAMBDA_UPDATE_STATUS" = "InProgress" ] || [ "$LAMBDA_STATE" = "Pending" ]; \
            then \
              echo "update inprogress"; \
              sleep 5; \
            else \
              echo "update failed"; \
              exit 1; \
            fi; \
          done

      - name: Publish version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ENV_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.ENV_AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
        run: aws lambda publish-version --function-name ${{ env.AWS_LAMBDA_FUNCTION_ARN }}
